import os
import json
import time
import uuid
import random
from concurrent.futures import ThreadPoolExecutor, as_completed
from termcolor import colored
from web3 import Web3
import platform

w3 = Web3(Web3.HTTPProvider("https://worldchain-mainnet.g.alchemy.com/v2/eyG6-pMprH5o2nHBsjPbK"))

os.makedirs("wallets/live", exist_ok=True)

def clear():
    os.system("cls" if platform.system()=="Windows" else "clear")

def banner():
    art = """ ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£∂‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£∂‚£ø‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£¥‚£ø‚£ø‚£∂‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚°ü‚†â‚†õ‚†ª‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ö‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†õ‚†ª‚†ø‚†ø‚£ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚°ø‚†ø‚†ü‚†õ‚†â‚†Ä‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£§‚£Ñ‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Å‚£†‚£∂‚£ø‚£∑‚°Ñ‚†Ä‚†ê‚£¶‚£§‚£§‚£§‚£§‚£§‚£§‚†Ñ‚†Ä‚†Ä‚¢§‚£§‚£§‚£§‚°Ä‚†Ä‚†Ä‚£†‚£§‚£§‚£§‚£§‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚†Ä
‚†Ä‚†Ä‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚¢Å‚£§‚†Ä‚¢ª‚†ü‚£ø‚£ø‚£ø‚£ø‚†ã‚¢Ä‚£¥‚£∂‚£Ñ‚†à‚¢ø‚£ø‚°á‚†Ä‚†Ä‚°ø‚†ü‚†õ‚†õ‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä
‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ã‚¢†‚£ø‚£ø‚°ß‚†Ä‚†Ä‚£ø‚°ø‚†ü‚†Å‚£†‚£æ‚£ø‚°è‚†â‚°á‚¢∏‚£π‚£ø‚†Ä‚†Ä‚£†‚†û‚†ã‚†â‚£Ç‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á
‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ü‚†ò‚¢ø‚°ø‚†ó‚†Ä‚¢Ä‚£Ä‚†Ä‚¢§‚£æ‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚°ú‚£Ω‚£ø‚£ß‚†Ä‚£á‚†ê‚¢ø‚£ø‚°∏‚°á‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑
‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚£†‚£¥‚£∂‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†â‚†õ‚†õ‚†ã‚¢Å‚£†‚£Æ‚£æ‚£ø‚£ø‚£ø‚£á‚†ò‚£∑‚†Ä‚¢ª‚¢á‚£ø‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚¢Å‚£¥‚£ø‚£ø‚£ø‚£ø‚°ø‚†õ‚¢Å‚£§‚£§‚†à‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ô‚†ª‚¢ø‚£ø‚°Ñ‚†ò‚¢†‚£Æ‚£æ‚†á‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚†è‚£†‚£æ‚£ø‚£ø‚°ø‚†á‚¢Ä‚£†‚£§‚†Ç‚†Ä‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†à‚†≥‚†Ä‚†ø‚†ü‚†ã‚£†‚£ø‚°ø‚†ã‚†Å‚£Ä‚£Ä‚°Ä‚†à‚†ô‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£Ö‚£¥‚£ø‚£ø‚°ø‚†ã‚£†‚£∂‚£ø‚£ø‚†É‚¢∞‚°Ñ‚†ò‚£ø‚£ø‚£∂‚£Ñ‚†Ä‚†Ä‚†Ä‚†ê‚¢∂‚£ø‚£ø‚£ø‚†Ä‚¢†‚£æ‚£ø‚£ø‚£ø‚£∑‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á
‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Ä‚£∏‚£ø‚£ø‚£ø‚°è‚†Ä‚¢ø‚£ø‚£Ü‚†à‚¢ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚£ø‚£ß‚°Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É
‚†Ä‚†Ä‚†Ä‚¢ø‚£ø‚£ø‚°ø‚†ø‚†õ‚†ø‚£ø‚£ø‚£ø‚°ø‚†ã‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚°Ä‚£º‚£ø‚£ø‚£ø‚£ø‚†Å‚£Ü‚†ò‚£ø‚£ø‚£¶‚†à‚¢ª‚£ø‚†á‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†ª‚¢ø‚£ø‚£ø‚†ø‚†ã‚†Ä‚†Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ä
‚†Ä‚†Ä‚†Ä‚†ò‚°ø‚†É‚¢Ä‚£¥‚£∂‚£∂‚£æ‚£ø‚†è‚†Ä‚†Ä‚†Ä‚£Ä‚†Ä‚¢ø‚£ø‚£ø‚£ø‚†ã‚¢Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚¢∏‚£ø‚°Ü‚†π‚£ø‚£ø‚£ß‚°Ä‚†ª‚†Ä‚£ø‚†Ä‚†ø‚†¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚†É‚†Ä‚†Ä‚£†‚£æ‚£ø‚£∑‚°Ä‚†ô‚†ø‚†É‚°∞‚†É‚†∏‚†ø‚†ü‚†ã‚¢Å‚£§‚°Ñ‚¢∏‚£ø‚£ø‚°Ä‚¢π‚£ø‚£ø‚£∑‚†Ä‚¢∞‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£ø‚£ø‚°ø‚†É‚†Ä‚†Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£§‚£º‚£ø‚£∂‚†Ä‚¢∞‚£∂‚°Ü‚£ø‚£ø‚°á‚¢∏‚£ø‚£ø‚£∑‚†à‚¢ø‚£ø‚°è‚¢†‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£ø‚£ø‚£ø‚£ø‚†è‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Å‚†Ä‚¢Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†õ‚†Å‚£Ä‚°à‚†ô‚†Å‚¢ø‚£ø‚°á‚¢∏‚£ø‚£ø‚£ø‚£á‚†à‚†è‚¢Ä‚£æ‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ø‚£ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ã‚£Ä‚£§‚£∂‚£∂‚£ø‚£ø‚£ø‚£∑‚£∂‚£§‚£å‚†Å‚†ò‚†ø‚£ø‚£ø‚°ø‚†Ç‚¢†‚£æ‚£ø‚£ø‚£ø‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ä‚£æ‚£ø‚°ø‚†ü‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£§‚£à‚£Å‚£¥‚£ø‚†ø‚†ø‚†ü‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ä‚¢ª‚£ø‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ü‚†õ‚†â‚†Å‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚¢ø‚£ø‚£ø‚£∑‚£Ñ‚†â‚†à‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†õ‚†â‚£Å‚°Ñ‚†Ä‚†Ä‚†Ä‚£¥‚£ø‚†Ü‚†Ä‚£†‚°Ñ‚†ò‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†ª‚£ø‚£ø‚£ø‚£∂‚£§‚£à‚£â‚°â‚†â‚†â‚†Ä‚†ê‚†í‚†õ‚†õ‚†Ä‚†Ä‚†Ä‚¢∏‚°ø‚†É‚†Ä‚£∏‚£ø‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†õ‚†ø‚°ø‚†ü‚†â‚£Å‚£§‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚†Ä‚¢Ä‚°Ä‚†à‚†Å‚†Ä‚†Ä‚£ø‚°ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£¥‚†õ‚¢â‚£â‚£§‚£§‚£§‚£§‚£ç‚£â‚£Ä‚£æ‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚†Ä‚£ø‚£ø‚†ü‚†õ‚†ã‚¢â‚£â‚°â‚†ª‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£ß‚£à‚£§‚†∂‚†æ‚¢ø‚£ø‚£ø‚°á‚†Ä‚°á‚†Ä‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ª‚£ø‚†Ä‚£¥‚£∂‚°¶‚¢§‚£§‚£§‚£æ‚£ø‚†Ä‚¢ª‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚¢ø‚£¶‚£§‚£§‚£§‚£§‚£Ñ‚°â‚¢ª‚£ø‚†Ä‚¢∏‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£Ü‚†à‚†ª‚†ã‚†Ä‚†Ä‚†Ä‚†â‚†Å‚†Ä‚†â‚†Ä‚¢∏‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚†ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
|====================================================================|‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
| ‚ñà‚ñÄ ‚ñà ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñÑ‚ñÄ‚ñà  ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñë‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ ‚ñÄ‚ñà‚ñÄ  ‚ñà‚ñë‚ñà ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñà ‚ñà‚ñÑ‚ñë‚ñà ‚ñà‚ñÄ‚ñÄ |
| ‚ñÑ‚ñà ‚ñà ‚ñà‚ñÑ‚ñà ‚ñà‚ñë‚ñÄ‚ñë‚ñà ‚ñà‚ñÄ‚ñà  ‚ñà‚ñÑ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÑ‚ñà ‚ñÑ‚ñà ‚ñë‚ñà‚ñë  ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÑ‚ñÑ ‚ñà‚ñë‚ñà ‚ñà ‚ñà‚ñë‚ñÄ‚ñà ‚ñà‚ñÑ‚ñà |
|====================================================================|

ùóñùóõùóîùóúùó° ùóõùó®ùó°ùóßùóòùó• W√•ll√™‚Ä† ùóöùóòùó°ùóòùó•ùóîùóßùó¢ùó•
"""
    print(colored(art, "cyan"))
    print(colored("üîó Twitter:    https://twitter.com/safderkhan0800_", "blue"))
    print(colored("üì∏ Instagram:  https://www.instagram.com/safderkhan0800_/", "blue"))
    print(colored("üé• YouTube:    https://www.youtube.com/@sigma_ghost_hacking", "blue"))
    print(colored("üõ°Ô∏è Telegram:   https://t.me/Sigma_Cyber_Ghost", "blue"))
    print()

def get_balance(address, retries=2, delay=0.5):
    for _ in range(retries):
        try:
            wei = w3.eth.get_balance(address)
            return float(w3.fromWei(wei, 'ether'))
        except:
            time.sleep(delay)
    return None

def generate_wallets():
    clear(); banner()
    try:
        count = int(input(colored("How many wallets to generate? ", "cyan")))
    except:
        print(colored("Invalid number.", "red")); time.sleep(1); return

    for i in range(count):
        acct = w3.eth.account.create()
        data = {
            "wallet_name": f"Wallet_{i}",
            "address": acct.address,
            "private_key": acct.key.hex(),
            "real_balance": "0 ETH"
        }
        with open(f"wallets/{acct.address}.json", "w") as f:
            json.dump(data, f, indent=4)

    print(colored(f"\n‚úÖ {count} valid wallets generated.", "green"))
    input(colored("Press Enter to return to menu.", "yellow"))

def scan_wallets():
    clear(); banner()
    if not w3.is_connected():
        print(colored("‚ùå RPC connection failed", "red")); input(); return

    files = [f for f in os.listdir("wallets") if f.endswith(".json")]
    live_count = 0

    with ThreadPoolExecutor(max_workers=8) as executor:
        futures = {}
        for fn in files:
            path = os.path.join("wallets", fn)
            try:
                data = json.load(open(path))
                futures[executor.submit(get_balance, data["address"])] = (fn, data)
            except Exception as e:
                print(colored(f"[Dead Wallet] Loading {fn} ‚Äî {e}", "red"))

        for future in as_completed(futures):
            fn, data = futures[future]
            bal = future.result()
            data["real_balance"] = f"{bal:.6f} ETH" if bal is not None else "ERROR"
            path = os.path.join("wallets", fn)
            with open(path, "w") as f:
                json.dump(data, f, indent=4)

            addr = data["address"]
            if bal is None:
                print(colored(f"[Dead] {addr}", "red"))
            elif bal > 0:
                os.makedirs("wallets/live", exist_ok=True)
                with open(f"wallets/live/{fn}", "w") as f:
                    json.dump(data, f, indent=4)
                print(colored(f"[LIVE] {addr} | {bal:.6f} ETH", "green"))
                live_count += 1
            else:
                print(colored(f"[DEAD] {addr} | 0 ETH", "red"))

    print(colored(f"\n‚úÖ Scan finished. {live_count} LIVE wallets.", "yellow"))
    input(colored("Press Enter to return to menu.", "cyan"))

def main():
    while True:
        clear(); banner()
        print(colored("1. Generate Wallets", "cyan"))
        print(colored("2. Check Wallets", "cyan"))
        print(colored("3. Exit", "red"))
        choice = input(colored("Select: ", "yellow")).strip()
        if choice == "1":
            generate_wallets()
        elif choice == "2":
            scan_wallets()
        elif choice == "3":
            break
        else:
            print(colored("Invalid choice.", "red")); time.sleep(1)

if __name__ == "__main__":
    main()
